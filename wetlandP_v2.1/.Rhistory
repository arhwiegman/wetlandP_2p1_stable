wrkdir <- getwd() # set up working directory in ~/wetlandP_v2.1 folder
path2userparameterscript = "_demo/edit_parameters_processes_demo_simple.R"
# LOAD DEPENDANCIES and SOURCE CODE ------------------------
try(setwd(file.path(wrkdir,"scripts"))) # navigate to scripts folder
# CLEAR GLOBAL ENVIRONMENT ---------------------------------
rm(list = ls(all.names = TRUE)) # will clear all objects
gc() #free up memory and report the memory usage.
wrkdir <- getwd() # set up working directory in ~/wetlandP_v2.1 folder
print(wrkdir)
# LOAD DEPENDANCIES and SOURCE CODE ------------------------
try(setwd(file.path(wrkdir,"scripts"))) # navigate to scripts folder
setwd(file.path(wrkdir,"scripts"))
try(setwd(file.path(wrkdir,"scripts"))) # navigate to scripts folder
try({
# dependancies
cat("sourcing 'dependancies.R'\n")
source("dependancies.R")
# functions
cat("sourcing 'functions.R'\n")
source("functions.R")
# subroutines
cat("sourcing 'subroutines.R'\n")
source("subroutines.R")
# model
cat("sourcing 'model.R'\n")
source("model.R")
# SET PARAMETER VALUES -------------------------------------
cat("sourcing 'parameters.R'\n")
source("parameters.R")
# INITIALIZE VARIABLES -------------------------------------
cat("sourcing 'initialize.R'\n")
source("initialize.R")
})
wrkdir <- getwd() # set up working directory in ~/wetlandP_v2.1 folder
wrkdir
setwd(wrkdir) # set wd back to working directory.
wrkdir
dir(dir())
wrkdir <- "~/GitHub/wetlandP_v2/wetlandP_v2.1"
getwd()
setwd(wrkdir)
source("~/GitHub/wetlandP_2p1_stable/wetlandP_v2.1/scripts/_demo/xecute_demo_dynamic.R", echo=TRUE)
sub_compile_parameters_user <- expression({
# initialize default parameter values
eval(sub_set_default_parameters)
# check that processes IOs are logical
eval(sub_check_process_IOs)
# creates a list containing all parameter vectors
eval(sub_mget_parameters_from_globenv_vectors)
# provide user input now that defaults have been set
eval(sub_set_user_parameters)
# update the parameters object with user inputs
eval(sub_mget_parameters_from_globenv_vectors)
})
print(parameters)
# Declare new values for any variable found in the `parameters` object
?parameters
??parameters
names(parameters)
"simname" %IN% names(parameters)
"simname" %in% names(parameters)
"simnotes" %in% names(parameters)
read_excel("demo_parameters.xlsx")
read_excel("_demo/demo_parameters.xlsx")
read_excel("_demo/demo_parameters.xlsx")
read_excel(file.path(wkdir,"_demo/demo_parameters.xlsx"))
rm(list = ls(all.names = TRUE)) # will clear all objects
gc() #free up memory and report the memory usage.
wrkdir <- getwd() # set up working directory in ~/wetlandP_v2.1 folder
print(wrkdir)
wrkdir
path2userparameterscript = file.path(wkdir,"_demo/edit_parameters_processes_demo_dynamic.R")
# USER INPUTS -------------------------------
# path2userparameterscript = NULL
path2userparameterscript = file.path(wrkdir,"_demo/edit_parameters_processes_demo_dynamic.R")
# USER INPUTS -------------------------------
# path2userparameterscript = NULL
path2userparameterscript = file.path(wrkdir,"scripts/_demo/edit_parameters_processes_demo_dynamic.R")
# EDIT PARAMETER VALUES --------------------------------------------------
# select row j of df sim pars, and remove any columns containing NA
demo_parameters <- read_excel(file.path(wkdir,"scripts/_demo/demo_parameters.xlsx"))
# EDIT PARAMETER VALUES --------------------------------------------------
# select row j of df sim pars, and remove any columns containing NA
demo_parameters <- read_excel(file.path(wrkdir,"scripts/_demo/demo_parameters.xlsx"))
demo_parameters
# EDIT PARAMETER VALUES --------------------------------------------------
# select row j of df sim pars, and remove any columns containing NA
demo_parameters <- read_excel(file.path(wrkdir,"scripts/_demo/demo_parameters.xlsx"),
skip=1)
# EDIT PARAMETER VALUES --------------------------------------------------
# select row j of df sim pars, and remove any columns containing NA
user_parameters <- read_excel(file.path(wrkdir,"scripts/_demo/demo_parameters.xlsx"),
skip=1)
user_parameters[j,colSums(is.na(user_parameters[j,]))!=1]
user_parameters[1,]
j = 1
par.list <- as.list(user_parameters[j,colSums(is.na(user_parameters[j,]))!=1])
par.list
# EDIT PARAMETER VALUES --------------------------------------------------
# select row j of df sim pars, and remove any columns containing NA
user_parameters <- read_excel(file.path(wrkdir,"scripts/_demo/demo_parameters.xlsx"),
skip=1)
j = 1
# EDIT PARAMETER VALUES --------------------------------------------------
# select row j of df sim pars, and remove any columns containing NA
user_parameters <- read_excel(file.path(wrkdir,"scripts/_demo/demo_parameters.xlsx"),
skip=1)
j = 1
user_parameters_list <- as.list(user_parameters[j,colSums(is.na(user_parameters[j,]))!=1])
# EDIT PARAMETER VALUES --------------------------------------------------
# select row j of df sim pars, and remove any columns containing NA
user_parameters <- read_excel(file.path(wrkdir,"scripts/_demo/demo_parameters.xlsx"),
skip=1)
j = 1
# convert the row of the data frame to a list
user_parameters_list <- as.list(user_parameters[j,colSums(is.na(user_parameters[j,]))!=1])
for(i in names(par.list)){
assign(i,unname(unlist(user_parameters_list[i])))
}
source("~/GitHub/wetlandP_2p1_stable/wetlandP_v2.1/scripts/_demo/xecute_demo_dynamic.R", echo=TRUE)
# USER INPUTS -------------------------------
# path2userparameterscript = NULL
path2userparameterscript = file.path(wrkdir,"scripts/_demo/edit_parameters_processes_demo_dynamic.R")
# LOAD DEPENDANCIES and SOURCE CODE ------------------------
try(setwd(file.path(wrkdir,"scripts"))) # navigate to scripts folder
try({
# dependancies
cat("sourcing 'dependancies.R'\n")
source("dependancies.R")
# functions
cat("sourcing 'functions.R'\n")
source("functions.R")
# subroutines
cat("sourcing 'subroutines.R'\n")
source("subroutines.R")
# model
cat("sourcing 'model.R'\n")
source("model.R")
# SET PARAMETER VALUES -------------------------------------
cat("sourcing 'parameters.R'\n")
source("parameters.R")
# INITIALIZE VARIABLES -------------------------------------
cat("sourcing 'initialize.R'\n")
source("initialize.R")
})
source("~/GitHub/wetlandP_2p1_stable/wetlandP_v2.1/scripts/_demo/xecute_demo_dynamic.R", echo=TRUE)
setwd(wrkdir)
wrkdir
wrkdir <- "C:/Users/Adrian.Wiegman/Documents/GitHub/wetlandP_2p1_stable/wetlandP_v2.1/"
wrkdir
# CLEAR GLOBAL ENVIRONMENT ---------------------------------
rm(list = ls(all.names = TRUE)) # will clear all objects
gc() #free up memory and report the memory usage.
wrkdir <- getwd() # set up working directory in ~/wetlandP_v2.1 folder
# CLEAR GLOBAL ENVIRONMENT ---------------------------------
rm(list = ls(all.names = TRUE)) # will clear all objects
gc() #free up memory and report the memory usage.
# set up working directory in ~/wetlandP_v2.1 folder
wrkdir <- getwd()
# it is best to hard code the directory in this script
#wrkdir <- "~/GitHub/wetlandP_v2/wetlandP_v2.1"
print(wrkdir)
# USER INPUTS -------------------------------
# path2userparameterscript = NULL
path2userparameterscript = file.path(wrkdir,"scripts/_demo/edit_parameters_processes_demo_dynamic.R")
source("~/GitHub/wetlandP_2p1_stable/wetlandP_v2.1/scripts/_demo/xecute_demo_dynamic.R", echo=TRUE)
wrkdir
tryCatch(1, finally = print("Hello"))
# USER INPUTS -------------------------------
path2userparameterscript = NULL # use NULL for default
stop(e)
# LOAD DEPENDANCIES and SOURCE CODE ------------------------
try({
setwd(file.path(wrkdir,"scripts"))  # navigate to scripts folder
# dependancies
cat("sourcing 'dependancies.R'\n")
source("dependancies.R")
# functions
cat("sourcing 'functions.R'\n")
source("functions.R")
# subroutines
cat("sourcing 'subroutines.R'\n")
source("subroutines.R")
# model
cat("sourcing 'model.R'\n")
source("model.R")
# SET PARAMETER VALUES -------------------------------------
cat("sourcing 'parameters.R'\n")
source("parameters.R")
# INITIALIZE VARIABLES -------------------------------------
cat("sourcing 'initialize.R'\n")
source("initialize.R")
})
e <- simpleError("test error")
setwd(wrkdir) # set wd back to working directory.
e
stop(e)
# EXECUTE RUN -------------------------------------------------------
system.time({
try({
sim <- fn_sim_ode(y = states,
times = simtimes,
func = wetlandP,
parms = parameters,
method="lsoda")
})
})
tryCatch(stop(e), finally = print("Hello"))
# MANIPULATE DATA & PLOT OUTPUTS ---------------------------------------
eval(sub_plot_outputs)
# SAVE IMAGE OF SIMULATION --------------------------------------
save.image(file=simfile)
tryCatch(1, finally = print("Hello"))
e <- simpleError("test error")
## Not run:
stop(e)
tryCatch(stop(e), finally = print("Hello"))
tryCatch(stop("fred"), finally = print("Hello"))
try(log("a"))
try(log("A"));print('hello')
wrkdir
# set up working directory in ~/wetlandP_v2.1 folder
# wrkdir <- getwd()
# it is best to hard code the directory in this script
wrkdir <- "~/GitHub/wetlandP_v2/wetlandP_v2.1"
# CLEAR GLOBAL ENVIRONMENT ---------------------------------
rm(list = ls(all.names = TRUE)) # will clear all objects
gc() #free up memory and report the memory usage.
# set up working directory in ~/wetlandP_v2.1 folder
# wrkdir <- getwd()
# it is best to hard code the directory in this script
wrkdir <- "~/GitHub/wetlandP_v2/wetlandP_v2.1"
print(wrkdir)
# USER INPUTS -------------------------------
path2userparameterscript = NULL # use NULL for default
# LOAD DEPENDANCIES and SOURCE CODE ------------------------
try({
setwd(file.path(wrkdir,"scripts"))  # navigate to scripts folder
# dependancies
cat("sourcing 'dependancies.R'\n")
source("dependancies.R")
# functions
cat("sourcing 'functions.R'\n")
source("functions.R")
# subroutines
cat("sourcing 'subroutines.R'\n")
source("subroutines.R")
# model
cat("sourcing 'model.R'\n")
source("model.R")
# SET PARAMETER VALUES -------------------------------------
cat("sourcing 'parameters.R'\n")
source("parameters.R")
# INITIALIZE VARIABLES -------------------------------------
cat("sourcing 'initialize.R'\n")
source("initialize.R")
})
setwd()
setwd(wrkdir)
getwd()
# set up working directory in ~/wetlandP_v2.1 folder
# wrkdir <- getwd()
# it is best to hard code the directory in this script
wrkdir <- "C:/Users/Adrian.Wiegman/Documents/GitHub/wetlandP_2p1_stable/wetlandP_v2.1/"
# set up working directory in ~/wetlandP_v2.1 folder
# wrkdir <- getwd()
# it is best to hard code the directory in this script
wrkdir <- "C:/Users/Adrian.Wiegman/Documents/GitHub/wetlandP_2p1_stable/wetlandP_v2.1/"
setwd(wrkdir)
wrkdir
# set up working directory in ~/wetlandP_v2.1 folder
# wrkdir <- getwd()
# it is best to hard code the directory in this script
wrkdir <- "~GitHub/wetlandP_2p1_stable/wetlandP_v2.1/"
setwd(wrkdir)
# set up working directory in ~/wetlandP_v2.1 folder
# wrkdir <- getwd()
# it is best to hard code the directory in this script
wrkdir <- "C:/Users/Adrian.Wiegman/Documents/GitHub/wetlandP_2p1_stable/wetlandP_v2.1/"
setwd(wrkdir)
print(wrkdir)
# USER INPUTS -------------------------------
path2userparameterscript = NULL # use NULL for default
# LOAD DEPENDANCIES and SOURCE CODE ------------------------
try({
setwd(file.path(wrkdir,"scripts"))  # navigate to scripts folder
# dependancies
cat("sourcing 'dependancies.R'\n")
source("dependancies.R")
# functions
cat("sourcing 'functions.R'\n")
source("functions.R")
# subroutines
cat("sourcing 'subroutines.R'\n")
source("subroutines.R")
# model
cat("sourcing 'model.R'\n")
source("model.R")
# parameters
cat("sourcing 'parameters.R'\n")
source("parameters.R")
cat("sourcing 'initialize.R'\n")
source("initialize.R")
setwd(wrkdir) # set wd back to working directory.
})
print(wrkdir)
# CLEAR GLOBAL ENVIRONMENT ---------------------------------
rm(list = ls(all.names = TRUE)) # will clear all objects
gc() #free up memory and report the memory usage.
# set up working directory in ~/wetlandP_v2.1 folder
# wrkdir <- getwd()
# save the Rproj home folder to wrkdir variable
wrkdir <- "C:/Users/Adrian.Wiegman/Documents/GitHub/wetlandP_2p1_stable/wetlandP_v2.1/"
# it is best to hard code the directory in this script
setwd(wrkdir)
print(wrkdir)
# USER INPUTS -------------------------------
path2userparameterscript = NULL # use NULL for default
# LOAD DEPENDANCIES and SOURCE CODE ------------------------
try({
setwd(file.path(wrkdir,"scripts"))  # navigate to scripts folder
# dependancies
cat("sourcing 'dependancies.R'\n")
source("dependancies.R")
# functions
cat("sourcing 'functions.R'\n")
source("functions.R")
# subroutines
cat("sourcing 'subroutines.R'\n")
source("subroutines.R")
# model
cat("sourcing 'model.R'\n")
source("model.R")
# parameters
cat("sourcing 'parameters.R'\n")
source("parameters.R")
cat("sourcing 'initialize.R'\n")
source("initialize.R")
setwd(wrkdir) # set wd back to project home directory.
})
print(wrkdir)
# CLEAR GLOBAL ENVIRONMENT ---------------------------------
rm(list = ls(all.names = TRUE)) # will clear all objects
gc() #free up memory and report the memory usage.
# set up working directory in ~/wetlandP_v2.1 folder
# wrkdir <- getwd()
# save the Rproj home folder to wrkdir variable
wrkdir <- "C:/Users/Adrian.Wiegman/Documents/GitHub/wetlandP_2p1_stable/wetlandP_v2.1/"
# it is best to hard code the directory in this script
setwd(wrkdir)
# USER INPUTS -------------------------------
path2userparameterscript = NULL # use NULL for default
# LOAD DEPENDANCIES and SOURCE CODE ------------------------
try({
setwd(file.path(wrkdir,"scripts"))  # navigate to scripts folder
# dependancies
cat("sourcing 'dependancies.R'\n")
source("dependancies.R")
# functions
cat("sourcing 'functions.R'\n")
source("functions.R")
# subroutines
cat("sourcing 'subroutines.R'\n")
source("subroutines.R")
# model
cat("sourcing 'model.R'\n")
source("model.R")
# parameters
cat("sourcing 'parameters.R'\n")
source("parameters.R")
cat("sourcing 'initialize.R'\n")
source("initialize.R")
setwd(wrkdir) # set wd back to project home directory.
})
# LOAD DEPENDANCIES and SOURCE CODE ------------------------
setwd(wrkdir) # make sure to start in the home folder
try({
setwd(file.path(wrkdir,"scripts"))  # navigate to scripts folder
# dependancies
cat("sourcing 'dependancies.R'\n")
source("dependancies.R")
# functions
cat("sourcing 'functions.R'\n")
source("functions.R")
# subroutines
cat("sourcing 'subroutines.R'\n")
source("subroutines.R")
# model
cat("sourcing 'model.R'\n")
source("model.R")
# parameters
cat("sourcing 'parameters.R'\n")
source("parameters.R")
cat("sourcing 'initialize.R'\n")
source("initialize.R")
})
setwd(wrkdir) # set wd back to project home directory.
# EXECUTE RUN -------------------------------------------------------
system.time({
try({
sim <- fn_sim_ode(y = states,
times = simtimes,
func = wetlandP,
parms = parameters,
method="lsoda")
})
})
# MANIPULATE DATA & PLOT OUTPUTS ---------------------------------------
eval(sub_plot_outputs)
source("~/GitHub/wetlandP_2p1_stable/wetlandP_v2.1/scripts/_demo/xecute_demo_dynamic.R", echo=TRUE)
source("~/GitHub/wetlandP_2p1_stable/wetlandP_v2.1/scripts/_demo/edit_parameters_processes_demo_dynamic_excel.R", echo=TRUE)
source("~/GitHub/wetlandP_2p1_stable/wetlandP_v2.1/scripts/_demo/xecute_demo_dynamic.R", echo=TRUE)
wkdir
source("~/GitHub/wetlandP_2p1_stable/wetlandP_v2.1/scripts/_demo/xecute_demo_dynamic.R", echo=TRUE)
# INPUT FILE NAME AND PATH
inputdir = "_demo/"
source("~/GitHub/wetlandP_2p1_stable/wetlandP_v2.1/scripts/_demo/xecute_demo_dynamic.R", echo=TRUE)
source("~/GitHub/wetlandP_2p1_stable/wetlandP_v2.1/scripts/_demo/xecute_demo_dynamic.R", echo=TRUE)
source("~/GitHub/wetlandP_2p1_stable/wetlandP_v2.1/scripts/_demo/xecute_demo_dynamic.R", echo=TRUE)
source("~/GitHub/wetlandP_2p1_stable/wetlandP_v2.1/scripts/_demo/xecute_demo_dynamic_excel.R", echo=TRUE)
source("~/GitHub/wetlandP_2p1_stable/wetlandP_v2.1/scripts/_demo/xecute_demo_dynamic_excel.R", echo=TRUE)
source("~/GitHub/wetlandP_2p1_stable/wetlandP_v2.1/scripts/_demo/xecute_demo_dynamic_excel.R", echo=TRUE)
# CLEAR GLOBAL ENVIRONMENT ---------------------------------
rm(list = ls(all.names = TRUE)) # will clear all objects
gc() #free up memory and report the memory usage.
wrkdir <- getwd() # set up working directory in ~/wetlandP_v2.1 folder
print(wrkdir)
# USER INPUTS -------------------------------
# path2userparameterscript = NULL
path2userparameterscript = file.path(wrkdir,"scripts/demo/edit_parameters_processes_demo_dynamic_excel.R")
# LOAD DEPENDANCIES and SOURCE CODE ------------------------
try(setwd(file.path(wrkdir,"scripts"))) # navigate to scripts folder
try({
# dependancies
cat("sourcing 'dependancies.R'\n")
source("dependancies.R")
# functions
cat("sourcing 'functions.R'\n")
source("functions.R")
# subroutines
cat("sourcing 'subroutines.R'\n")
source("subroutines.R")
# model
cat("sourcing 'model.R'\n")
source("model.R")
# SET PARAMETER VALUES -------------------------------------
cat("sourcing 'parameters.R'\n")
source("parameters.R")
# INITIALIZE VARIABLES -------------------------------------
cat("sourcing 'initialize.R'\n")
source("initialize.R")
})
# USER INPUTS -------------------------------
# path2userparameterscript = NULL
path2userparameterscript = file.path(wrkdir,"scripts/_demo/edit_parameters_processes_demo_dynamic_excel.R")
# LOAD DEPENDANCIES and SOURCE CODE ------------------------
try(setwd(file.path(wrkdir,"scripts"))) # navigate to scripts folder
try({
# dependancies
cat("sourcing 'dependancies.R'\n")
source("dependancies.R")
# functions
cat("sourcing 'functions.R'\n")
source("functions.R")
# subroutines
cat("sourcing 'subroutines.R'\n")
source("subroutines.R")
# model
cat("sourcing 'model.R'\n")
source("model.R")
# SET PARAMETER VALUES -------------------------------------
cat("sourcing 'parameters.R'\n")
source("parameters.R")
# INITIALIZE VARIABLES -------------------------------------
cat("sourcing 'initialize.R'\n")
source("initialize.R")
})
setwd(wrkdir) # set wd back to working directory.
# load the user_parameters dataframe from an excel sheet
# the excel sheet can contain data that is not used by the model
df.sim.pars <- read_excel(file.path(wrkdir,"scripts/_demo/demo_parameters.xlsx"),
skip=1)
j = 1 # select row number
# this code block automatically assigns objects in the list into variables in the global environment
sub_load_row_variables_into_global_env <- expression({
# select a row, then convert the data to a list format
pars.list <- as.list(df.sim.pars[j,colSums(is.na(df.sim.pars[j,]))!=1])
# this loops through the variables then assigns them to global env.
for(i in names(par.list)){
assign(i,unname(unlist(par.list[i])))
}
})
# run the subroutine
eval(sub_load_row_variables_into_global_env)
# load the user_parameters dataframe from an excel sheet
# the excel sheet can contain data that is not used by the model
df.sim.pars <- read_excel(file.path(wrkdir,"scripts/_demo/demo_parameters.xlsx"),
skip=1)
j = 1 # select row number
# this code block automatically assigns objects in the list into variables in the global environment
sub_load_row_variables_into_global_env <- expression({
# select a row, then convert the data to a list format
par.list <- as.list(df.sim.pars[j,colSums(is.na(df.sim.pars[j,]))!=1])
# this loops through the variables then assigns them to global env.
for(i in names(par.list)){
assign(i,unname(unlist(par.list[i])))
}
})
# run the subroutine
eval(sub_load_row_variables_into_global_env)
source("~/GitHub/wetlandP_2p1_stable/wetlandP_v2.1/scripts/_demo/xecute_demo_dynamic_excel.R", echo=TRUE)
source("~/GitHub/wetlandP_2p1_stable/wetlandP_v2.1/scripts/_demo/xecute_demo_dynamic_excel.R", echo=TRUE)
